plot.margin = margin(6,6,6,6)
)
New   # export the plot width_x_hight = 775 x 500
New <- ggplot(Flr, aes(x=trt, y=CTCF)) +
geom_boxplot(aes(color = measure, linetype = strain), alpha = 1, outlier.shape = NA) +
geom_point(aes(x=trt, y=CTCF, colour = measure, fill = strain), size = 3, shape = 16, alpha = 1, position = position_jitterdodge(0.1)) +
scale_colour_manual(values = c("purple3", "orange2", "chartreuse3"), # "red3", "steelblue3", "#888888" # "purple3", "chartreuse3", "orange2"
labels = c("Tight", "Medium", "Sloppy")) + # "Chr-2", "Chr-3", "X-Chr"
scale_linetype_manual(values = c(1, 8),
labels = c("RCT239", "SJ4005")) +
# guides(color = guide_legend(aes()),
#        line = guide_legend(aes())) +
# geom_abline(intercept = 0, slope = 0,  size = 0.5, linetype= "solid", color = "black") +
scale_x_discrete(labels = c("DMSO", "TM")) + # "Highly ant.", "Antagonistic", "Uncorrelated", "Concordant", "Highly con." .... "Strong pur.", "Purifying sel.", "Neutral", "Positive sel.", "Strong pos."
scale_y_continuous(limits = c(0, 6.2e+08), breaks = c(0, 2e+08, 4e+08, 6e+08)) +
labs(x = "Treatment", # space controls for plot size and spacing (fix if not needed)
y = "CTCF") +
theme_classic() +
theme(plot.title.position = c("panel"),
legend.title = element_blank(),
legend.position = c("bottom"), # or "[x,y]" coordinates, or "none"
#legend.justification = c("right", "bottom"),
#legend.box.just = "left",
#legend.box.background = element_rect(),
legend.box.background = element_blank(),
#legend.box.margin = margin(4, 6, 6, 6),
legend.text = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=20, margin = margin(5,0,0,0), color = "black"),
axis.text.y = element_text(size=20, margin = margin(0,5,0,0), color = "black"),
axis.title.x = element_text(size=40, margin = margin(10,0,0,0), color = "black"),
axis.title.y = element_text(size=40, margin = margin(0,10,0,0), color = "black"),
plot.title = element_text(size=40, margin = margin(0,0,0,0), color = "black"),
plot.margin = margin(6,6,6,6)
)
New   # export the plot width_x_hight = 775 x 500
New <- ggplot(Flr, aes(x=trt, y=CTCF)) +
geom_boxplot(aes(fill = measure, color = strain), alpha = 1, outlier.shape = NA) +
geom_point(aes(x=trt, y=CTCF, fill = measure, colour = strain), size = 3, shape = 16, alpha = 1, position = position_jitterdodge(0.1)) +
scale_fill_manual(values = c("purple3", "orange2", "chartreuse3"),
labels = c("Tight", "Medium", "Sloppy")) +
scale_colour_manual(values = c("black", "#888888"), # "red3", "steelblue3", "#888888" # "purple3", "chartreuse3", "orange2"
labels = c("RCT239", "SJ4005")) + # "Chr-2", "Chr-3", "X-Chr"
# guides(color = guide_legend(aes()),
#        fill = guide_legend(aes())) +
# geom_abline(intercept = 0, slope = 0,  size = 0.5, linetype= "solid", color = "black") +
scale_x_discrete(labels = c("DMSO", "TM")) + # "Highly ant.", "Antagonistic", "Uncorrelated", "Concordant", "Highly con." .... "Strong pur.", "Purifying sel.", "Neutral", "Positive sel.", "Strong pos."
scale_y_continuous(limits = c(0, 6.2e+08), breaks = c(0, 2e+08, 4e+08, 6e+08)) +
labs(x = "Treatment", # space controls for plot size and spacing (fix if not needed)
y = "CTCF") +
theme_classic() +
theme(plot.title.position = c("panel"),
legend.title = element_blank(),
legend.position = c("bottom"), # or "[x,y]" coordinates, or "none"
#legend.justification = c("right", "bottom"),
#legend.box.just = "left",
#legend.box.background = element_rect(),
legend.box.background = element_blank(),
#legend.box.margin = margin(4, 6, 6, 6),
legend.text = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=20, margin = margin(5,0,0,0), color = "black"),
axis.text.y = element_text(size=20, margin = margin(0,5,0,0), color = "black"),
axis.title.x = element_text(size=40, margin = margin(10,0,0,0), color = "black"),
axis.title.y = element_text(size=40, margin = margin(0,10,0,0), color = "black"),
plot.title = element_text(size=40, margin = margin(0,0,0,0), color = "black"),
plot.margin = margin(6,6,6,6)
)
New   # export the plot width_x_hight = 775 x 500
New <- ggplot(Flr, aes(x=trt, y=CTCF)) +
geom_boxplot(aes(fill = measure, color = strain), alpha = 1, outlier.shape = NA) +
geom_point(aes(x=trt, y=CTCF, colour = measure), size = 3, shape = 16, alpha = 1, position = position_jitterdodge(0.1)) +
scale_fill_manual(values = c("purple3", "orange2", "chartreuse3"),
labels = c("Tight", "Medium", "Sloppy")) +
scale_colour_manual(values = c("black", "#888888"), # "red3", "steelblue3", "#888888" # "purple3", "chartreuse3", "orange2"
labels = c("RCT239", "SJ4005")) + # "Chr-2", "Chr-3", "X-Chr"
# guides(color = guide_legend(aes()),
#        fill = guide_legend(aes())) +
# geom_abline(intercept = 0, slope = 0,  size = 0.5, linetype= "solid", color = "black") +
scale_x_discrete(labels = c("DMSO", "TM")) + # "Highly ant.", "Antagonistic", "Uncorrelated", "Concordant", "Highly con." .... "Strong pur.", "Purifying sel.", "Neutral", "Positive sel.", "Strong pos."
scale_y_continuous(limits = c(0, 6.2e+08), breaks = c(0, 2e+08, 4e+08, 6e+08)) +
labs(x = "Treatment", # space controls for plot size and spacing (fix if not needed)
y = "CTCF") +
theme_classic() +
theme(plot.title.position = c("panel"),
legend.title = element_blank(),
legend.position = c("bottom"), # or "[x,y]" coordinates, or "none"
#legend.justification = c("right", "bottom"),
#legend.box.just = "left",
#legend.box.background = element_rect(),
legend.box.background = element_blank(),
#legend.box.margin = margin(4, 6, 6, 6),
legend.text = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=20, margin = margin(5,0,0,0), color = "black"),
axis.text.y = element_text(size=20, margin = margin(0,5,0,0), color = "black"),
axis.title.x = element_text(size=40, margin = margin(10,0,0,0), color = "black"),
axis.title.y = element_text(size=40, margin = margin(0,10,0,0), color = "black"),
plot.title = element_text(size=40, margin = margin(0,0,0,0), color = "black"),
plot.margin = margin(6,6,6,6)
)
New   # export the plot width_x_hight = 775 x 500
New <- ggplot(Flr, aes(x=trt, y=CTCF)) +
geom_boxplot(aes(fill = measure, color = strain), alpha = 1, outlier.shape = NA) +
geom_point(aes(x=trt, y=CTCF, fill = measure, colour = measure), size = 3, shape = 16, alpha = 1, position = position_jitterdodge(0.1)) +
scale_fill_manual(values = c("purple3", "orange2", "chartreuse3"),
labels = c("Tight", "Medium", "Sloppy")) +
scale_colour_manual(values = c("black", "#888888"), # "red3", "steelblue3", "#888888" # "purple3", "chartreuse3", "orange2"
labels = c("RCT239", "SJ4005")) + # "Chr-2", "Chr-3", "X-Chr"
# guides(color = guide_legend(aes()),
#        fill = guide_legend(aes())) +
# geom_abline(intercept = 0, slope = 0,  size = 0.5, linetype= "solid", color = "black") +
scale_x_discrete(labels = c("DMSO", "TM")) + # "Highly ant.", "Antagonistic", "Uncorrelated", "Concordant", "Highly con." .... "Strong pur.", "Purifying sel.", "Neutral", "Positive sel.", "Strong pos."
scale_y_continuous(limits = c(0, 6.2e+08), breaks = c(0, 2e+08, 4e+08, 6e+08)) +
labs(x = "Treatment", # space controls for plot size and spacing (fix if not needed)
y = "CTCF") +
theme_classic() +
theme(plot.title.position = c("panel"),
legend.title = element_blank(),
legend.position = c("bottom"), # or "[x,y]" coordinates, or "none"
#legend.justification = c("right", "bottom"),
#legend.box.just = "left",
#legend.box.background = element_rect(),
legend.box.background = element_blank(),
#legend.box.margin = margin(4, 6, 6, 6),
legend.text = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=20, margin = margin(5,0,0,0), color = "black"),
axis.text.y = element_text(size=20, margin = margin(0,5,0,0), color = "black"),
axis.title.x = element_text(size=40, margin = margin(10,0,0,0), color = "black"),
axis.title.y = element_text(size=40, margin = margin(0,10,0,0), color = "black"),
plot.title = element_text(size=40, margin = margin(0,0,0,0), color = "black"),
plot.margin = margin(6,6,6,6)
)
New   # export the plot width_x_hight = 775 x 500
New <- ggplot(Flr, aes(x=trt, y=CTCF)) +
geom_boxplot(aes(fill = measure, color = strain), alpha = 1, outlier.shape = NA) +
geom_point(aes(x=trt, y=CTCF, fill = strain, colour = measure), size = 3, shape = 16, alpha = 1, position = position_jitterdodge(0.1)) +
scale_fill_manual(values = c("purple3", "orange2", "chartreuse3"),
labels = c("Tight", "Medium", "Sloppy")) +
scale_colour_manual(values = c("black", "#888888"), # "red3", "steelblue3", "#888888" # "purple3", "chartreuse3", "orange2"
labels = c("RCT239", "SJ4005")) + # "Chr-2", "Chr-3", "X-Chr"
# guides(color = guide_legend(aes()),
#        fill = guide_legend(aes())) +
# geom_abline(intercept = 0, slope = 0,  size = 0.5, linetype= "solid", color = "black") +
scale_x_discrete(labels = c("DMSO", "TM")) + # "Highly ant.", "Antagonistic", "Uncorrelated", "Concordant", "Highly con." .... "Strong pur.", "Purifying sel.", "Neutral", "Positive sel.", "Strong pos."
scale_y_continuous(limits = c(0, 6.2e+08), breaks = c(0, 2e+08, 4e+08, 6e+08)) +
labs(x = "Treatment", # space controls for plot size and spacing (fix if not needed)
y = "CTCF") +
theme_classic() +
theme(plot.title.position = c("panel"),
legend.title = element_blank(),
legend.position = c("bottom"), # or "[x,y]" coordinates, or "none"
#legend.justification = c("right", "bottom"),
#legend.box.just = "left",
#legend.box.background = element_rect(),
legend.box.background = element_blank(),
#legend.box.margin = margin(4, 6, 6, 6),
legend.text = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=20, margin = margin(5,0,0,0), color = "black"),
axis.text.y = element_text(size=20, margin = margin(0,5,0,0), color = "black"),
axis.title.x = element_text(size=40, margin = margin(10,0,0,0), color = "black"),
axis.title.y = element_text(size=40, margin = margin(0,10,0,0), color = "black"),
plot.title = element_text(size=40, margin = margin(0,0,0,0), color = "black"),
plot.margin = margin(6,6,6,6)
)
New   # export the plot width_x_hight = 775 x 500
New <- ggplot(Flr, aes(x=trt, y=CTCF)) +
geom_boxplot(aes(fill = measure, color = strain), alpha = 1, outlier.shape = NA) +
geom_point(aes(x=trt, y=CTCF, fill = measure, colour = strain), size = 3, shape = 16, alpha = 1, position = position_jitterdodge(0.1)) +
scale_fill_manual(values = c("purple3", "orange2", "chartreuse3"),
labels = c("Tight", "Medium", "Sloppy")) +
scale_colour_manual(values = c("black", "#888888"), # "red3", "steelblue3", "#888888" # "purple3", "chartreuse3", "orange2"
labels = c("RCT239", "SJ4005")) + # "Chr-2", "Chr-3", "X-Chr"
# guides(color = guide_legend(aes()),
#        fill = guide_legend(aes())) +
# geom_abline(intercept = 0, slope = 0,  size = 0.5, linetype= "solid", color = "black") +
scale_x_discrete(labels = c("DMSO", "TM")) + # "Highly ant.", "Antagonistic", "Uncorrelated", "Concordant", "Highly con." .... "Strong pur.", "Purifying sel.", "Neutral", "Positive sel.", "Strong pos."
scale_y_continuous(limits = c(0, 6.2e+08), breaks = c(0, 2e+08, 4e+08, 6e+08)) +
labs(x = "Treatment", # space controls for plot size and spacing (fix if not needed)
y = "CTCF") +
theme_classic() +
theme(plot.title.position = c("panel"),
legend.title = element_blank(),
legend.position = c("bottom"), # or "[x,y]" coordinates, or "none"
#legend.justification = c("right", "bottom"),
#legend.box.just = "left",
#legend.box.background = element_rect(),
legend.box.background = element_blank(),
#legend.box.margin = margin(4, 6, 6, 6),
legend.text = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=20, margin = margin(5,0,0,0), color = "black"),
axis.text.y = element_text(size=20, margin = margin(0,5,0,0), color = "black"),
axis.title.x = element_text(size=40, margin = margin(10,0,0,0), color = "black"),
axis.title.y = element_text(size=40, margin = margin(0,10,0,0), color = "black"),
plot.title = element_text(size=40, margin = margin(0,0,0,0), color = "black"),
plot.margin = margin(6,6,6,6)
)
New   # export the plot width_x_hight = 775 x 500
New <- ggplot(Flr, aes(x=trt, y=CTCF, fill = measure)) +
geom_boxplot(aes(fill = measure, color = strain), alpha = 1, outlier.shape = NA) +
geom_point(aes(), size = 3, shape = 16, alpha = 1, position = position_jitterdodge(0.1)) +
scale_fill_manual(values = c("purple3", "orange2", "chartreuse3"),
labels = c("Tight", "Medium", "Sloppy")) +
scale_colour_manual(values = c("black", "#888888"), # "red3", "steelblue3", "#888888" # "purple3", "chartreuse3", "orange2"
labels = c("RCT239", "SJ4005")) + # "Chr-2", "Chr-3", "X-Chr"
# guides(color = guide_legend(aes()),
#        fill = guide_legend(aes())) +
# geom_abline(intercept = 0, slope = 0,  size = 0.5, linetype= "solid", color = "black") +
scale_x_discrete(labels = c("DMSO", "TM")) + # "Highly ant.", "Antagonistic", "Uncorrelated", "Concordant", "Highly con." .... "Strong pur.", "Purifying sel.", "Neutral", "Positive sel.", "Strong pos."
scale_y_continuous(limits = c(0, 6.2e+08), breaks = c(0, 2e+08, 4e+08, 6e+08)) +
labs(x = "Treatment", # space controls for plot size and spacing (fix if not needed)
y = "CTCF") +
theme_classic() +
theme(plot.title.position = c("panel"),
legend.title = element_blank(),
legend.position = c("bottom"), # or "[x,y]" coordinates, or "none"
#legend.justification = c("right", "bottom"),
#legend.box.just = "left",
#legend.box.background = element_rect(),
legend.box.background = element_blank(),
#legend.box.margin = margin(4, 6, 6, 6),
legend.text = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=20, margin = margin(5,0,0,0), color = "black"),
axis.text.y = element_text(size=20, margin = margin(0,5,0,0), color = "black"),
axis.title.x = element_text(size=40, margin = margin(10,0,0,0), color = "black"),
axis.title.y = element_text(size=40, margin = margin(0,10,0,0), color = "black"),
plot.title = element_text(size=40, margin = margin(0,0,0,0), color = "black"),
plot.margin = margin(6,6,6,6)
)
New   # export the plot width_x_hight = 775 x 500
N
N
New <- ggplot(Flr, aes(x=trt, y=CTCF)) +
geom_boxplot(aes(fill = measure, color = strain), alpha = 1, outlier.shape = NA) +
geom_point(aes(x=trt, y=CTCF, fill = measure, colour = strain), size = 3, shape = 1, alpha = 1, position = position_jitterdodge(0.1)) +
scale_fill_manual(values = c("purple3", "orange2", "chartreuse3"),
labels = c("Tight", "Medium", "Sloppy")) +
scale_colour_manual(values = c("black", "#888888"), # "red3", "steelblue3", "#888888" # "purple3", "chartreuse3", "orange2"
labels = c("RCT239", "SJ4005")) + # "Chr-2", "Chr-3", "X-Chr"
# guides(color = guide_legend(aes()),
#        fill = guide_legend(aes())) +
# geom_abline(intercept = 0, slope = 0,  size = 0.5, linetype= "solid", color = "black") +
scale_x_discrete(labels = c("DMSO", "TM")) + # "Highly ant.", "Antagonistic", "Uncorrelated", "Concordant", "Highly con." .... "Strong pur.", "Purifying sel.", "Neutral", "Positive sel.", "Strong pos."
scale_y_continuous(limits = c(0, 6.2e+08), breaks = c(0, 2e+08, 4e+08, 6e+08)) +
labs(x = "Treatment", # space controls for plot size and spacing (fix if not needed)
y = "CTCF") +
theme_classic() +
theme(plot.title.position = c("panel"),
legend.title = element_blank(),
legend.position = c("bottom"), # or "[x,y]" coordinates, or "none"
#legend.justification = c("right", "bottom"),
#legend.box.just = "left",
#legend.box.background = element_rect(),
legend.box.background = element_blank(),
#legend.box.margin = margin(4, 6, 6, 6),
legend.text = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=20, margin = margin(5,0,0,0), color = "black"),
axis.text.y = element_text(size=20, margin = margin(0,5,0,0), color = "black"),
axis.title.x = element_text(size=40, margin = margin(10,0,0,0), color = "black"),
axis.title.y = element_text(size=40, margin = margin(0,10,0,0), color = "black"),
plot.title = element_text(size=40, margin = margin(0,0,0,0), color = "black"),
plot.margin = margin(6,6,6,6)
)
New   # export the plot width_x_hight = 775 x 500
New <- ggplot(Flr, aes(x=trt, y=CTCF)) +
geom_boxplot(aes(fill = measure, color = strain), alpha = 1, outlier.shape = NA) +
geom_point(aes(x=trt, y=CTCF, fill = measure, colour = strain), size = 3, shape = 21, alpha = 1, position = position_jitterdodge(0.1)) +
scale_fill_manual(values = c("purple3", "orange2", "chartreuse3"),
labels = c("Tight", "Medium", "Sloppy")) +
scale_colour_manual(values = c("black", "#888888"), # "red3", "steelblue3", "#888888" # "purple3", "chartreuse3", "orange2"
labels = c("RCT239", "SJ4005")) + # "Chr-2", "Chr-3", "X-Chr"
# guides(color = guide_legend(aes()),
#        fill = guide_legend(aes())) +
# geom_abline(intercept = 0, slope = 0,  size = 0.5, linetype= "solid", color = "black") +
scale_x_discrete(labels = c("DMSO", "TM")) + # "Highly ant.", "Antagonistic", "Uncorrelated", "Concordant", "Highly con." .... "Strong pur.", "Purifying sel.", "Neutral", "Positive sel.", "Strong pos."
scale_y_continuous(limits = c(0, 6.2e+08), breaks = c(0, 2e+08, 4e+08, 6e+08)) +
labs(x = "Treatment", # space controls for plot size and spacing (fix if not needed)
y = "CTCF") +
theme_classic() +
theme(plot.title.position = c("panel"),
legend.title = element_blank(),
legend.position = c("bottom"), # or "[x,y]" coordinates, or "none"
#legend.justification = c("right", "bottom"),
#legend.box.just = "left",
#legend.box.background = element_rect(),
legend.box.background = element_blank(),
#legend.box.margin = margin(4, 6, 6, 6),
legend.text = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=20, margin = margin(5,0,0,0), color = "black"),
axis.text.y = element_text(size=20, margin = margin(0,5,0,0), color = "black"),
axis.title.x = element_text(size=40, margin = margin(10,0,0,0), color = "black"),
axis.title.y = element_text(size=40, margin = margin(0,10,0,0), color = "black"),
plot.title = element_text(size=40, margin = margin(0,0,0,0), color = "black"),
plot.margin = margin(6,6,6,6)
)
New   # export the plot width_x_hight = 775 x 500
New <- ggplot(Flr, aes(x=trt, y=CTCF)) +
geom_boxplot(aes(fill = measure, color = strain), alpha = 1, outlier.shape = NA) +
geom_point(aes(x=trt, y=CTCF, fill = measure, colour = strain), size = 3, shape = 21, alpha = 0.5, position = position_jitterdodge(0.1)) +
scale_fill_manual(values = c("purple3", "orange2", "chartreuse3"),
labels = c("Tight", "Medium", "Sloppy")) +
scale_colour_manual(values = c("black", "#888888"), # "red3", "steelblue3", "#888888" # "purple3", "chartreuse3", "orange2"
labels = c("RCT239", "SJ4005")) + # "Chr-2", "Chr-3", "X-Chr"
# guides(color = guide_legend(aes()),
#        fill = guide_legend(aes())) +
# geom_abline(intercept = 0, slope = 0,  size = 0.5, linetype= "solid", color = "black") +
scale_x_discrete(labels = c("DMSO", "TM")) + # "Highly ant.", "Antagonistic", "Uncorrelated", "Concordant", "Highly con." .... "Strong pur.", "Purifying sel.", "Neutral", "Positive sel.", "Strong pos."
scale_y_continuous(limits = c(0, 6.2e+08), breaks = c(0, 2e+08, 4e+08, 6e+08)) +
labs(x = "Treatment", # space controls for plot size and spacing (fix if not needed)
y = "CTCF") +
theme_classic() +
theme(plot.title.position = c("panel"),
legend.title = element_blank(),
legend.position = c("bottom"), # or "[x,y]" coordinates, or "none"
#legend.justification = c("right", "bottom"),
#legend.box.just = "left",
#legend.box.background = element_rect(),
legend.box.background = element_blank(),
#legend.box.margin = margin(4, 6, 6, 6),
legend.text = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=20, margin = margin(5,0,0,0), color = "black"),
axis.text.y = element_text(size=20, margin = margin(0,5,0,0), color = "black"),
axis.title.x = element_text(size=40, margin = margin(10,0,0,0), color = "black"),
axis.title.y = element_text(size=40, margin = margin(0,10,0,0), color = "black"),
plot.title = element_text(size=40, margin = margin(0,0,0,0), color = "black"),
plot.margin = margin(6,6,6,6)
)
New   # export the plot width_x_hight = 775 x 500
New <- ggplot(Flr, aes(x=trt, y=CTCF)) +
geom_point(aes(x=trt, y=CTCF, fill = measure, colour = strain), size = 3, shape = 21, alpha = 1, position = position_jitterdodge(0.1)) +
geom_boxplot(aes(fill = measure, color = strain), alpha = 0.5, outlier.shape = NA) +
scale_fill_manual(values = c("purple3", "orange2", "chartreuse3"),
labels = c("Tight", "Medium", "Sloppy")) +
scale_colour_manual(values = c("black", "#888888"), # "red3", "steelblue3", "#888888" # "purple3", "chartreuse3", "orange2"
labels = c("RCT239", "SJ4005")) + # "Chr-2", "Chr-3", "X-Chr"
# guides(color = guide_legend(aes()),
#        fill = guide_legend(aes())) +
# geom_abline(intercept = 0, slope = 0,  size = 0.5, linetype= "solid", color = "black") +
scale_x_discrete(labels = c("DMSO", "TM")) + # "Highly ant.", "Antagonistic", "Uncorrelated", "Concordant", "Highly con." .... "Strong pur.", "Purifying sel.", "Neutral", "Positive sel.", "Strong pos."
scale_y_continuous(limits = c(0, 6.2e+08), breaks = c(0, 2e+08, 4e+08, 6e+08)) +
labs(x = "Treatment", # space controls for plot size and spacing (fix if not needed)
y = "CTCF") +
theme_classic() +
theme(plot.title.position = c("panel"),
legend.title = element_blank(),
legend.position = c("bottom"), # or "[x,y]" coordinates, or "none"
#legend.justification = c("right", "bottom"),
#legend.box.just = "left",
#legend.box.background = element_rect(),
legend.box.background = element_blank(),
#legend.box.margin = margin(4, 6, 6, 6),
legend.text = element_text(size = 20, color = "black"),
axis.text.x = element_text(size=20, margin = margin(5,0,0,0), color = "black"),
axis.text.y = element_text(size=20, margin = margin(0,5,0,0), color = "black"),
axis.title.x = element_text(size=40, margin = margin(10,0,0,0), color = "black"),
axis.title.y = element_text(size=40, margin = margin(0,10,0,0), color = "black"),
plot.title = element_text(size=40, margin = margin(0,0,0,0), color = "black"),
plot.margin = margin(6,6,6,6)
)
New   # export the plot width_x_hight = 775 x 500
###################################
#
#      Karl Grieshop
#      University of East Anglia
#      Data Science and Bioinformatics (BIO-7051B)
#      DESeq2 Tutorial - Differential Gene Expression Analysis
#      Data were prepared using MaleLimitedEvo_Pipeline.sh
#      2025-02-27
#
###################################
# rm(list=ls()) # Clears the environment
# Packages
##########
# Function to check if a package is installed, and install it if not
install_if_missing <- function(p) {
if (!requireNamespace(p, quietly = TRUE)) {
install.packages(p)
}
}
# Check and install required packages
install_if_missing("BiocManager")
if (!requireNamespace("DESeq2", quietly = TRUE)) {
BiocManager::install("DESeq2")
}
if (!requireNamespace("vsn", quietly = TRUE)) {
BiocManager::install("vsn")
}
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
if (!requireNamespace("clipr", quietly = TRUE)) {
install.packages("clipr")
}
# Load necessary libraries
library(DESeq2)
library(vsn)
library(dplyr)
library(ggplot2)
library(clipr)
##########
# Now get chromosome locations from reference genome (will be useful later)
##########
all.genes <- read.delim(file="~/Documents/BIO UEA/Teaching/Module - Data Science and Bioinformatics/Session10/RNA-Seq_Tutorial/ExtractGenes/GeneLists/all.genes.tsv", sep="\t", header=FALSE)
colnames(all.genes) = c("FlyBaseID")
Xchr <- read.delim(file="~/Documents/BIO UEA/Teaching/Module - Data Science and Bioinformatics/Session10/RNA-Seq_Tutorial/ExtractGenes/GeneLists/X.chromosome.genes.tsv", sep="\t", header=TRUE)
colnames(Xchr) = c("FlyBaseID")
Xchr$Chr <- rep("X", dim(Xchr)[1])
Ychr <- read.delim(file="~/Documents/BIO UEA/Teaching/Module - Data Science and Bioinformatics/Session10/RNA-Seq_Tutorial/ExtractGenes/GeneLists/Y.chromosome.genes.tsv", sep="\t", header=TRUE)
colnames(Ychr) = c("FlyBaseID")
Ychr$Chr <- rep("Y", dim(Ychr)[1])
chr2L <- read.delim(file="~/Documents/BIO UEA/Teaching/Module - Data Science and Bioinformatics/Session10/RNA-Seq_Tutorial/ExtractGenes/GeneLists/2L.chromosome.genes.tsv", sep="\t", header=FALSE)
colnames(chr2L) = c("FlyBaseID")
chr2R <- read.delim(file="~/Documents/BIO UEA/Teaching/Module - Data Science and Bioinformatics/Session10/RNA-Seq_Tutorial/ExtractGenes/GeneLists/2R.chromosome.genes.tsv", sep="\t", header=FALSE)
colnames(chr2R) = c("FlyBaseID")
#
chr2 <- rbind(chr2L, chr2R)
chr2$Chr <- rep("2", dim(chr2)[1])
chr3L <- read.delim(file="~/Documents/BIO UEA/Teaching/Module - Data Science and Bioinformatics/Session10/RNA-Seq_Tutorial/ExtractGenes/GeneLists/3L.chromosome.genes.tsv", sep="\t", header=FALSE)
colnames(chr3L) = c("FlyBaseID")
chr3R <- read.delim(file="~/Documents/BIO UEA/Teaching/Module - Data Science and Bioinformatics/Session10/RNA-Seq_Tutorial/ExtractGenes/GeneLists/3R.chromosome.genes.tsv", sep="\t", header=FALSE)
colnames(chr3R) = c("FlyBaseID")
#
chr3 <- rbind(chr3L, chr3R)
chr3$Chr <- rep("3", dim(chr3)[1])
Chrs <- rbind(Xchr, Ychr, chr2, chr3) # Not all genes; just X, Y, 2, and 3.
Chrs$Chr <- as.factor(Chrs$Chr)
##########
# Set path to RNA-Seq read count data files
Data_path <- "~/Documents/BIO UEA/Teaching/Module - Data Science and Bioinformatics/Session10/RNA-Seq_Tutorial/ReadCounts/"
setwd(Data_path)
# List the files by category
files <- list.files(Data_path)
# Chop off the ".tsv" from those file names
samplename <- gsub('.{4}$', '', files)
# Set up factors for condition (must match order that files are listed; see "samplename" and "files")
sex <- factor(rep(c("Female", "Male"), each = 12))
geno <- factor(c(rep(c("NR", "Red"), each = 6, times = 2)))
rep <- factor(c(as.character(c(rep(1:6, each = 1, times = 4) ))))
# Create the sample table
sampleTable <- data.frame(sampleName = samplename,
fileName = files,
sex = sex,
geno = geno,
rep = rep)
# Display the structure of the sample table to check that factors are correctly set
str(sampleTable)
##########
# Subset data
A.f <- sampleTable[(sampleTable$sex == "Female"),]
A.f$sex <- droplevels(A.f$sex)
A.m <- sampleTable[(sampleTable$sex == "Male"),]
A.m$sex <- droplevels(A.m$sex)
##########
# Set up contrast designs
dds.A.f.geno <- DESeqDataSetFromHTSeqCount(sampleTable = A.f,
design = ~ rep + geno) # model
dds.A.m.geno <- DESeqDataSetFromHTSeqCount(sampleTable = A.m,
design = ~ rep + geno) # model
# Set parameters for the focal contrast
minCountPerSample = 1 # you decide
minAvgPerCat = 10 # you decide
focal.contrast <- dds.A.f.geno # change accordingly (note confusing overwrite in DESeq2 documentation in this section)
# Specify the samples for each category of the focal contrasts
numerator <- samplename[7:12] # print this to make sure it's right! (e.g. Red females: samplename[7:12])
denominator <- samplename[1:6] # print this to make sure it's right! (e.g. NR females: samplename[1:6])
# Analysis details
factor.numerator.denominator = c("geno", "Red", "NR") # used later (change accordingly)
alpha.threshold = 0.05 # defaults to 0.05 but you could change it
# Set up count dataframe for focal contrast
countdf = DESeq2::counts(focal.contrast) # See Environment, "Large matrix", how large? Correct?)
# Filtering (set parameters above)
lowCountAnySample.numerator = sapply(1:(dim(countdf)[1]), function (x) prod(countdf[x, numerator]) < minCountPerSample)
lowCountAnySample.denominator = sapply(1:(dim(countdf)[1]), function (x) prod(countdf[x, denominator]) < minCountPerSample)
lowCountAnySample.Either =  lowCountAnySample.numerator | lowCountAnySample.denominator
avgCounts.numerator = rowMeans(countdf[, numerator])
avgCounts.denominator = rowMeans(countdf[, denominator])
goodAvgCount.numerator = avgCounts.numerator > minAvgPerCat
goodAvgCount.denominator = avgCounts.denominator > minAvgPerCat
goodAvgCount.Both = goodAvgCount.numerator & goodAvgCount.denominator
keep.these = goodAvgCount.Both & (!lowCountAnySample.Either)
# Filter the focal contrast dataframe
focal.contrast.filtered = focal.contrast[keep.these]
# Do the analysis for that focal contrast using those filtered data
DESeq.Analysis = DESeq(focal.contrast.filtered)
# Get the results of that analysis
DESeq.Results = results(DESeq.Analysis, contrast = factor.numerator.denominator, alpha = alpha.threshold, independentFiltering=T)
# Remove Y genes (relevant to comparing males and females)
DESeq.Results$FlyBaseID = rownames(DESeq.Results)
DESeq.Results <- DESeq.Results[!(DESeq.Results$FlyBaseID %in% Ychr$FlyBaseID),]
# Remove genes on Chr 4 and pseudogenes (optional)
DESeq.Results$FlyBaseID = rownames(DESeq.Results)
DESeq.Results <- DESeq.Results[(DESeq.Results$FlyBaseID %in% Chrs$FlyBaseID),]
# Look at the metadata for DEseq's independent filtering
plot(metadata(DESeq.Results)$filterNumRej, type="b", ylab="number of rejections", xlab="quantiles of filter")
lines(metadata(DESeq.Results)$lo.fit, col="red")
abline(v=metadata(DESeq.Results)$filterTheta)
# Have a basic look
summary(DESeq.Results)
DESeq2::plotMA(DESeq.Results, ylim=c(-5,5), colSig = "red", colNonSig = "lightgray")
##########
# Perform PCA
vsd <- vst(focal.contrast, blind=FALSE)
pcaData <- plotPCA(vsd, intgroup=c("geno", "rep"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
# Plot PCA
ggplot(pcaData, aes(PC1, PC2, color=rep, shape=geno)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
##########
install.packages("janitor")
